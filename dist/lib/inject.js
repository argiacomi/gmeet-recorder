const D="INFO",l={ERROR:0,WARN:1,INFO:2,DEBUG:3},_=["ERROR","WARN","INFO","DEBUG"];class y{constructor(e=l.INFO){this.level=e}_log(e,n,...s){if(e<=this.level){const a=new Date().toISOString(),i=_[e],c=`[${a}] [${i}] ${n}`;switch(e){case l.ERROR:console.error(c,...s);break;case l.WARN:console.warn(c,...s);break;case l.INFO:console.info(c,...s);case l.DEBUG:default:console.log(c,...s);break}}}error(e,...n){this._log(l.ERROR,e,...n)}warn(e,...n){this._log(l.WARN,e,...n)}info(e,...n){this._log(l.INFO,e,...n)}debug(e,...n){this._log(l.DEBUG,e,...n)}setLevel(e){l[e]?this.level=l[e]:(this.warn(`Invalid log level: ${level}. Using default level: INFO`),this.level=l.INFO)}}const M=(d=D)=>new y(l[d]),I=d=>{let e=null;return{initialize:()=>{if(!window.RTCRtpSender)return!1;const n=window.RTCRtpSender.prototype.replaceTrack;return window.RTCRtpSender.prototype.replaceTrack=function(s){return e!=null&&e.onReplaceTrack&&e.onReplaceTrack(s),n.apply(this,arguments)},!0},register:n=>{e=n}}},C=M(),v=d=>{let e={peerMessages:[],logChannelArgs:!1,channelListeners:[]};return{initialize:()=>{if(!window.RTCPeerConnection)return!1;window.dg_channels=window.dg_channels||{};const n=window.RTCPeerConnection,s=n.prototype.createDataChannel;return s&&(n.prototype.createDataChannel=function(){e.logChannelArgs&&C.debug("[WebRtcProxy] Creating data channel with args",arguments);try{const a=s.apply(this,arguments);if(a&&e.channelListeners.length>0){const i=e.channelListeners.find(c=>c.label===a.label);i&&(a.addEventListener("message",i.callback),i.monitor&&i.monitor(a),window.dg_channels[a.label]=a)}return a}catch(a){C.debug("[WebRtcProxy]: ",a)}}),window.RTCPeerConnection=function(a,i){const c=new n(a,i);for(const R of e.peerMessages)c.addEventListener(R.event,h=>{R.callback(c,h)});return c},window.RTCPeerConnection.prototype=n.prototype,!0},register:n=>{e={peerMessages:[...e.peerMessages,...n.peerMessages],logChannelArgs:n.logChannelArgs,channelListeners:[...e.channelListeners,...n.channelListeners]}}}},x=()=>{const d=new Map,e=new Map;let n=23484;return{set:(s,a)=>{d.set(s,a),e.forEach(i=>i(a))},get:s=>d.get(s),has:s=>d.has(s),toArray:()=>Array.from(d.values()),size:()=>d.size,subscribe:s=>{const a=n++;return e.set(a,s),a},unsubscribe:s=>{e.delete(s)},getKeys:()=>Array.from(d.keys())}},E=100,b={START_RECORDING:"START_RECORDING",TOGGLE_RECORDING:"TOGGLE_RECORDING",STOP_RECORDING:"STOP_RECORDING",MEETING_ENDED:"MEETING_ENDED"},W={WEBRTC:"webrtc",HTML:"html"},r=M(),z=(d,e,n,s={})=>{let a,i,c,R=E,h=!1;const p=[],w=[];r.setLevel(s.logLevel);const f=t=>{if(!i){r.error("[AddStream] No audio context");return}if(r.debug("[AddStream] Adding stream::",t),t.getAudioTracks().length===0){r.debug(`[AddStream]  Stream ${t.id} has no audio tracks stream::`,t);return}if(!h){r.debug("[AddStream] Recording has not started yet");return}if(!a){r.debug("[AddStream] No audio destination");return}i.createMediaStreamSource(t).connect(a)},A=(t,o)=>{if(!(o.streams.length===0||t.connectionState==="closed")){r.debug("[HandleTrack] Peer connection",t),r.debug("[HandleTrack] Track event",o);for(const g of o.streams)g.getAudioTracks().length>0&&(p.push(g),f(g))}},L=t=>{const o=new MediaStream;o.addTrack(t),p.push(o),w.push(o),f(o)},N=t=>{d.set(R++,t.data)},O=t=>{try{return i?(a=i.createMediaStreamDestination(),r.debug("[StartWebRTC] Audio destination created",a),p.forEach(f),S(t),!0):(r.error("[StartWebRTC] WebRTC has no audio context"),!1)}catch(o){return r.error("[StartWebRTC] Failed to start recorder",o),!1}},G=t=>{const o=document.getElementsByTagName("audio");o.length===0&&r.error("[StartHTMLRecorder] No audio elements found on page"),i||r.error("[StartHTMLRecorder] No audio context"),a=i.createMediaStreamDestination(),w.forEach(f);for(const g of o){const u=g.srcObject;i.createMediaStreamSource(u).connect(a)}return S(t),!0},S=async t=>{if(!i){r.error("[StartAudioRecording] No audio context");return}try{i.state!=="running"&&(r.warn("[StartAudioRecording] Audio context is not running. Attempting to resume."),await i.resume()),c=new MediaRecorder(a.stream,{mimeType:"audio/webm"}),c.ondataavailable=N,c.onstop=k,R!==E&&(r.error(`'[StartAudioRecording] Incorrect audio ID. Got: ${R}, Expected: ${E}`),d.set(R++,s.header)),c.start(t),r.debug("[StartAudioRecording] Audio recorder started")}catch(o){throw r.error("[StartAudioRecording] Failed to start audio recording",o),o}},k=()=>{r.debug("[SaveRecording] Audio recorder stopping");const t=new Blob(d.toArray(),{type:"audio/webm"}),o=URL.createObjectURL(t),g=`audio_recording_${new Date().toISOString()}.webm`,u=document.createElement("a");u.style.display="none",u.href=o,u.download=g,document.body.appendChild(u),u.click(),window.URL.revokeObjectURL(o),document.body.removeChild(u),r.debug("[SaveRecording] Audio recording saved",g)},m=()=>{r.debug("[GoogleMeets] Performing cleanup operations"),window.googleMeets.stopRecorder(),p.forEach(t=>{t.getTracks().forEach(o=>{o.stop()})}),w.forEach(t=>{t.getTracks().forEach(o=>{o.stop()})}),i&&i.close().then(()=>{r.info("[GoogleMeets] Audio context closed")}).catch(t=>{r.error("[GoogleMeets] Error closing audio context",t)}),p.length=0,w.length=0,window.removeEventListener("beforeunload",m),window.removeEventListener("message",T),r.info("[Cleanup] Cleanup completed")},T=t=>{var o;if(t.source===window)switch((o=t.data)==null?void 0:o.type){case b.START_RECORDING:r.info("[GoogleMeets] Start recording requested"),window.googleMeets.startRecorder(2e3,W.WEBRTC);break;case b.TOGGLE_RECORDING:r.info("[GoogleMeets] Toggle recording requested"),window.googleMeets.toggleRecording();break;case b.STOP_RECORDING:r.info("[GoogleMeets] Stop recording requested"),window.googleMeets.stopRecorder();break;case b.MEETING_ENDED:r.info("[GoogleMeets] Meeting ended"),window.googleMeets.cleanup();break}};return{initialize:()=>{try{n.initialize(),n.register({onReplaceTrack:L});const t=e.initialize();e.register({logChannelArgs:!0,peerMessages:[{event:"track",callback:A}],channelListeners:[]});const o=document.createElement("meta");o.setAttribute("id","dg-proxy-check"),o.setAttribute("name","hasCreatedProxies"),o.setAttribute("content",String(t)),(document.head||document.documentElement).prepend(o),window.addEventListener("load",()=>{r.debug("[GoogleMeets] Audio::Window load event"),i=new AudioContext,window.dg_audio_context=i}),window.addEventListener("beforeunload",m),window.addEventListener("message",T)}catch(t){r.error("[GoogleMeets] Initialization failed",t)}},startRecorder:(t,o="webrtc")=>{switch(r.debug(`[StartRecorder] Starting recorder in ${o} mode`),o){case"webrtc":return h=!0,O(t);case"html":return h=!0,G(t);default:return r.error(`[StartRecorder] Unsupported recorder mode: ${o}`),!1}},stopRecorder:()=>{c&&c.state==="recording"?(r.debug("[StopRecorder] Stopping Media Recorder"),c.stop(),c.stream.getTracks().forEach(t=>{r.debug("[StopRecorder] Stopping track:",t.kind),t.stop()}),h=!1):r.debug("[StopRecorder] MediaRecorder not recording")}}},P=()=>{if(window.has_injected_stenographer){r.debug("[Stenographer] Stenographer already initialized");return}window.has_injected_stenographer=!0;const d=x(),e=z(d,v(),I(),{logLevel:"DEBUG"});r.debug(`[Stenographer] Stenographer initialized at: ${Date.now()}`),e.initialize(),window.googleMeets=e};r.debug("[Stenographer] Injecting Stenographer");P();
