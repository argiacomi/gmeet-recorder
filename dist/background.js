import{l as u,L as g}from"./lib/logger.js";const d=(...e)=>u(g.Background,...e);async function m(){try{return(await chrome.runtime.getContexts({})).find(a=>a.contextType==="OFFSCREEN_DOCUMENT")?d("Offscreen document already exists"):(d("Creating offscreen document"),await chrome.offscreen.createDocument({url:"html/offscreen.html",reasons:["CLIPBOARD"],justification:"Write to clipboard"})),!0}catch(e){return d("Error creating offscreen document:",e),!1}}const s=(...e)=>u(g.Background,...e);let r=null,o=new Map,i=!1,c=!1;chrome.runtime.onMessage.addListener(e=>{if(Object.values(g).includes(e.type))return console.log(`[${e.type}]`,...e.log),!0});chrome.runtime.onConnect.addListener(e=>{if(e.name==="offscreen")r=e,r.onDisconnect.addListener(()=>{r=null}),console.log("Offscreen port connected");else if(e.name==="content"){const n=e.sender.tab.id;o.set(n,e),e.onDisconnect.addListener(()=>{o.delete(n)}),console.log("Tab port connected")}e.onMessage.addListener(l)});chrome.runtime.onMessage.addListener((e,n,a)=>(l(e,n,a),!0));async function l(e,n,a){try{const t=e.tabId?e.tabId:n.tab?n.tab.id:null;switch(e.type){case"start-recording":s("Attempting to start recording"),await m(),r?r.postMessage({type:"start-recording",tabId:t}):await chrome.runtime.sendMessage({type:"start-recording",target:"offscreen-doc",tabId:t});break;case"toggle-recording":s(c?"Attempting to resume recording":"Attempting to pause recording");const f=c?"resume-recording":"pause-recording";r&&r.postMessage({type:f}),o.has(t)&&o.get(t).postMessage({type:f}),a({isRecording:i,isPaused:c});break;case"stop-recording":s("Attempting to stop recording"),r&&r.postMessage({type:"stop-recording"}),o.has(t)&&o.get(t).postMessage({type:"stop-recording"});break;case"get-recording-status":s("Get recording status requested:",i,c),a({isRecording:i,isPaused:c});break;case"screen-picked":console.log(t),o.has(t)&&o.get(t).postMessage({type:"start-recording"});break;case"recording-started":i=!0;break;case"recording-paused":s("Recording Pausesd"),c=!0;break;case"recording-resumed":s("Recording Resumed"),c=!1;break;case"recording-complete":i=!1,chrome.offscreen.closeDocument();break}return!0}catch(t){return s(`Error in callRecorder with ${e.type} message:`,t),!1}}
